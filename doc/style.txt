Formatting
  + use k & r style, except:
    + indent with two spaces
  + use braces around single-statement parts of if-then
  + use "f() {}" (open/close braces on the same line) to show that there is no
    plan to implement this function
  + no whitespace at the end of a line
  + for multiline critical blocks, format like this:
    lock();
    {
        do-stuff();
        do-more-stuff();
    }
    unlock();

Structure
  + in a function, use three blocks sepetated by double newlines
    + three blocks
      + assert preconditions and do declarations
      + main business
      + assert postconditions and return
    + if the whole function is three lines or less, or the whole function body
      is one statement, don't use double newlines to separate the blocks
  + in a file, place things in this order:
    + #ifndef (if an .h file)
    + #includes
    + #defines
    + enum declarations
    + struct declarations
    + typedefs
    + static variable declarations
    + static function declarations
    + function definitions
  + alphabetize #includes, function declarations and definitions

Terms
  + the highest level directory "cf" is called a project
  + lower-level directories are called "systems"
  + a .h/.c/.test.c triplet is associated with a "module"

Naming
  + name modules like project_system_[system_...]module (cf_x_core_object)
  + name functions like project_system_module_verb
    or project_system_module_verb_noun (cf_x_case_set_add_object)
  + items in "tools" or "declarations" modules can omit the module name
  + create/get/get_as functions
    + a get_x() function returns a value or pointer that the providing object
      manages
    + a get_x_copy() function returns a pointer that the caller manages
    + a get_as() function returns a a value or pointer that the caller manages
      + uuid_get_as_string()
    + a create() function returns a value or pointer that the caller manages
      + string_create_from_uuid()
  + in a container, "replace" means remove, then add; or find, remove, then add
  + use "_size" to name a variable/function that indicates the size of
    something including any terminator characters; use "_length" to name a
    variable/function that indicates the number of characters in a string,
    excluding the terminator character
  + if there's one main executable in a system named xyz, name the executable's
    main program source xyz.c
  + name a system's central logical module "system" (with system.h/system.c/
    system.test.c)

Logic
  + in a system that has a create() function, always have a destroy() function
  + one return per function, at the end of the function, no guard clauses
  + test every return condition
    + no need to test these unless you want to:
      + cf_x_core_trace(), cf_x_core_trace_exit()
      + cf_x_core_log_enter(), cf_x_core_log_trace()
    + don't test these:
      + get() functions where the value is guaranteed to be there by a
        precondition :: like, it's returning a pointer to, or copy of,
        something that is already guaranteed to be there
      + a cf_x_core_map_find() where a precondition guarantees that that item
        is there...like as the result of an sql query, where you've checked the
        return value of the query() function
    + we're not testing pthread_mutex_[un]lock() right now...
  + don't initialize things until/unless you need to
  + don't use the const keyword
    + unless you absolutely have to to connect with some external library
  + use assert()s to express preconditions unless it's a 1-line synonym
    function...a function that's a return statement calling another function
  + logging
    + use cf_x_core_trace(), cf_x_core_trace_exit(), and cf_x_core_log_trace()
      when you want to report an error :: an error is defined as when you call
      a function and it returns a value that indicates that it didn't do what
      you wanted it to do
      + the only text you pass to a trace message is the name of the function
        you called that returned an error
    + use cf_x_core_log_enter() for everything else
    + prefer cf_x_core_log_enter() and cf_x_core_log_trace() over
      cf_x_core_trace() and cf_x_core_trace_exit()
    + only use cf_x_core_trace_exit() in a file that contains a main()
      + eventually I'm going to get rid of all of these, even from main
        programs
  + put constants first when using == operator (0 == c)
  + sizeof(char) is always 1 :: don't multiply anything by sizeof(char)
  + no comments in completed code
  + put a default: block in every switch statement, followed by at least a
    break;
  + when referring to paths/urls/directories, always start with a slash, never
    end with one
  + generally, don't use straight int's, use short or long
  + generally, do one thing per line
    + generally, don't use the tertiary operator
    + generally, don't use the comma operator
    + generally, set a variable to the return value of a function, then use
      that variable in the call to another function, rather than nesting
      function calls
  + generally, code for what you want to happen, not what you don't want to
    happen
  + don't use static keyword on function definitions
